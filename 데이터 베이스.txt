T-SQL - SQL 서버

PL SQL - 오라클





데이터 베이스



* DBMS 설치전 준수 *



1. Release Note(릴리스 노트) 확인


DBMS 설치전, 지원되는 플랫폼에서 가능한 DBMS 버전을 선택하여 설치




2. 라이센스 정보 확인



제품에 대해 구입한 라이센스 정보를 정확하게 확인후 설치



3. 하드웨어 요구 사항 점검



DBMS 설치에 필요한 메인 메모리 , 스왑 메모리 , 하드 디스크 여유 공간 확인



  #grep MemTotal /proc/meminfo (메인)
  #grep SwapTotal /proc/meminfo (스왑)
  # df -h (하드 디스크 공간 확인)
  # df -h /tmp


4.소프트웨어 요구 사항 점검



운영 체제 버전 , 커널 요구 사항 , 패키지 종류와 버젼 , 컴파일러 버전 등 확인


  # cat /proc/version (운영 체제 확인)
  # rpm -qa (패키지 요구사항 확인)


5. 운영체제 그룹과 사용자 점검



오라클 설치인 경우 Orcle 계정, MySQL은 mysql 계정 생성

계정 생성후 dba 그룹 등록



6. 커널 파라미터 점검



커널 파라미터 권장 값은 보통 최소값(Minimum) 이다


권장 값 이상으로 변경하는게 좋음



7. 운영 체제 디렉토리 점검







sqlplus / as sysdba = SQL 접속 방법




select * from v$version = DBMS 버전 확인 방법

2;




select status from v$instace;




show user;
show user

---------------------------------------


select * from all_users;

(HR , SCOTT 많이 사용)



----------------------------------------

비밀번호


HR : hrhr

SCOTT : tiger

SYS : orcle

-----------------------------------------


DB Object = Table 이다


-----------------------------------------


SCOTT 계정 접속 방법


alter user scott identified by tiger account unlock;


conn scott/tiger;


-----------------------------------------


select * from tab; = 계정 속 Table 보는 방법


desc dept;


select * from dept;


------------------------------------------

SCOTT 빠른 접속


sqlplus scott/tiger

------------------------------------------


select count(*) from dept;


select deptno, DNAME, LOC from dept
where deptno = 10;

-------------------------------------------

오라클 데이터 베이스 용량 산정에 포함되는 필수 파일


1. 데이터 파일

2. 컨트롤 파일

3. 리두 로그 파일



MySQL 데이터 베이스 용량 산정에 포함되는 필수 파일


1. 데이터 파일

2. 리두 로그 파일




용량 산정 목적


디스크 사용 효율 높이기 위함





용량 산정 방법


테이블 행의 크기 , 트랜잭션 양 , 보관주기 등을 고려하여 산정


용량 계산에는 데이터 베이스 시스템 파일(컨트롤 파일 , 리두 로그 파일 등)도 포함해야 함





Ditionary Cache

(Static data dictionary)
- DBA_
- ALL_
_ USER_


(Dynamic performance view)
- v$로 시작


*DBA_





* 오라클 설치 *



1. 데이터베이스 생성 및 구성

2. 서버 클래스

3. 단일 인스턴스 데이터베이스 설치

4. 고급 설치

5. Enterprise Edition(3.34GB)

6. 일반용/트랜잭션 처리

7. 이름 설정

8. 비밀번호 oracle


----------------------------------------------------

데이터 베이스 오브젝트


테이블 , 인덱스

----------------------------------------------------


1. 데이터 파일 -> 테이블과 인덱스가 저장되는 파일





2. 컨트롤 파일 -> 오라클 데이터 베이스의 필수 파일 , 동기화 정보를

저장하고 있는 이진 파일 , DB를 시작하고 운영하는데 반드시 필요함




3. 리두 로그 파일 -> 데이터 베이스의 모든 병경 사항을 기록하는 파일

손상될 경우 데이터 유실 발생


----------------------------------------------------



테이블 스페이스 생성 방법

SQL> create tablespace ts_q1
  2  datafile 'C:\APP\C-08\ORADATA\TESTDB\파일명.DBF' size ?m (경로설정은 유동적)
  3  autoextend on;

----------------------------------------------------------


          
          lg                                 ph



스키마 1) DB



       2) Tablespace (1 : n) datafile



       3) segment



       4) extent



       5) orcle
          data block

------------------------------------------------------------



데이터 베이스 생성 명령문(create database) , 생성 시의 필수 옵션은 DBMS 종류에 따라 다름



@dd -> 테이블 스페이스 보는법


-----------------------------------------------------------------



유저가 가진 권한 보는법

select * from dba_sys_privs
where grantee='유저명'; 



-----------------------------------------------------------------

desc = 현재 유저의 테이블 항목 조회법



show parameter undo;


f = v&logfile

g = v&log

------------------------------------------------------------------

select f.member, g.bytes/1024/1024 mb, g.group# from v&log g
inner join v&logfile f
on g.group#=f.group#
order by f.group#;


오브젝트들의 집합 = 스키마


테이블 구조를 정의하면서 데이터 무결성을 유지하기 위해 제약 조건을 이용한다



cascade : 연속으로 같은 동작

set null : 모두 null로 변경해 주는 동작

set default : 주어진 초기값으로 변경함

restrict : 동작 취소

drop : 구조(x) , log(x)

delete : 구조(o) , log(o)

truncate : 구조(o) , log(x) 


1. 관리할 데이터 확인

 - 데이터 확인
 - 타입 결정
 - 제약조건 존재여부 확인

2. 관리대상 테이블 조사

 - 구성요소 조사
 - 제약조건 선택

3. 









SQL> grant connect, resource to SIG;

권한이 부여되었습니다.

SQL> conn SIG/1234
연결되었습니다.
SQL> show user
USER은 "SIG"입니다
SQL>


SQL> select constraint_type
  2  from user_constraints
  3  where table_name = '주문테이블';



INSERT INTO employees (u_id, name, password, position, workplace, address, birthday, joinday, weddingday) 
VALUES (1234, 'SIG', 'qwer', 'asd', 'sdff', 'sdffd', '2019-08-07', '2017-11-23', '2018-04-29');




create table employees (
u_id number NOT NULL,
name varchar2(8) NOT NULL,
password varchar2(8) NOT NULL,
position varchar2(8) NOT NULL,
workplace varchar2(8) NOT NULL,
address varchar2(20) NOT NULL,
birthday date NOT NULL,
joinday date NOT NULL,
weddingday date NOT NULL);


create table salaries ( -- 급여 테이블
emp_no number not null,
salary number not null,
from_date date not null,
to_date date,
foreign key (emp_no) references employees (u_id) on delete cascade,
primary key (emp_no, from_date)
);


INSERT INTO salaries (emp_no, salary, from_date)
VALUES (1234, 4000000, '2017-07-01');













SQL> INSERT INTO salaries (emp_no, salary, from_date)
  2  VALUES (1234, SIG, '2017-07-01', null);
INSERT INTO salaries (emp_no, salary, from_date)
            *
1행에 오류:
ORA-00913: 값의 수가 너무 많습니다


SQL> INSERT INTO salaries (emp_no, salary, from_date)
  2  VALUES (1234, 4000000, '2017-07-01');

1 개의 행이 만들어졌습니다.

SQL> select * from salaries;

    EMP_NO     SALARY FROM_DAT TO_DATE
---------- ---------- -------- --------
      1234    4000000 17/07/01

SQL> select * from employees;

      U_ID NAME     PASSWORD POSITION WORKPLAC ADDRESS              BIRTHDAY
---------- -------- -------- -------- -------- -------------------- --------
JOINDAY  WEDDINGD
-------- --------
      1234 SIG      qwer     asd      sdff     sdffd                19/08/07
17/11/23 18/04/29


https://fmaker7.tistory.com/2 = 오라클 테이블 생성, 조회, 수정, 프라이머리 키, 포린 키 생성 삭제


not null = 

DDL = 데이터를 담을 그릇을 만드는것

DML = 그릇안에 데이터를 담는것

DCL = 그릇을 사용할수있는 권한을 통제

TCL = 트랜잭션 권한 제어


grant dba to 계정명; = 해당계정에 모든 권한 부여

select * from user_sys_privs; = 현재 계정 권한 조회




SQL> create table test(no number(3),
  2  name varchar2(10),
  3  age number(3),
  4  gender varchar2(6));

테이블이 생성되었습니다.

SQL> insert into test values(1, 'joker', '28', 'm');

1 개의 행이 만들어졌습니다.

SQL> select * from test
  2  ;

        NO NAME              AGE GENDER
---------- ---------- ---------- ------
         1 joker              28 m

SQL> savepoint s1;

저장점이 생성되었습니다.

SQL> insert into test values(3, 'smith', '35', 'm');

1 개의 행이 만들어졌습니다.

SQL> select * from test
  2  ;

        NO NAME              AGE GENDER
---------- ---------- ---------- ------
         1 joker              28 m
         3 smith              35 m

SQL> select * from test;

        NO NAME              AGE GENDER
---------- ---------- ---------- ------
         1 joker              28 m
         3 smith              35 m

SQL> desc test
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 NO                                                 NUMBER(3)
 NAME                                               VARCHAR2(10)
 AGE                                                NUMBER(3)
 GENDER                                             VARCHAR2(6)

SQL> rollback to s1;

롤백이 완료되었습니다.



데이터 사전은 meta data 로 구성되어있음

데이터 사전은 DB의 데이터를 제외한 모든정보가 있음

meta data = 데이터의 데이터



- 삭제된 테이블은 롤백 불가능! -